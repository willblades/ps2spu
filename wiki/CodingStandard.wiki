#summary The standard styles used for writing the ps2spu software.

= Introduction =

The software writing philosophy on this project is simple.
  # Design the code in small, modular units as much as possible.
  # Keep the code base neat, clean, and well documented unlike many emulation projects.
  # Give your variables descriptive names for maintainability.

= Naming Variables =

  # Global variables will consist of all capital letters with underscore separated words.
    * `const int PLUGIN_VERSION_MAJOR = 0;`
  # All other variables will consist of lowercase letters with underscore separated words.
    * `int num_devices = 0;`
  # Pointer variables will use the same style as other variables, but end with _ptr.
    * `int* num_devices_ptr = NULL;`
    * `const IDevice* SOUND_DEVICE_PTR = NULL;`
  # Handle variables will use the same style as other variables, but end with _handle.
    * `HWND GLOBAL_WINDOW_HANDLE = NULL;`
    * `HWND cancel_button_handle = NULL;`
  # Class member variables shall use the same style rules, but end with an underscore.
    * `int channel_ = 0;`
  # Use descriptive names everywhere, even when just iterating.
    * `for(int reg_index = 0; reg_index < NUM_REGS; reg_index++) { ... }`

= Function/Class/Struct/Enum/Macro Naming =

  # The first word in a function name will be lowercase, subsequent words will start with an uppercase letter.
    * `void readMemory8();`
  # Interface class will begin with the letter I followed by the class name with each word beginning with an uppercase letter.
    * `class ISoundDevice { ... };`
  # Non-interface classes will begin with have each word beginning with an uppercase letter.
    * `class DirectSoundDevice : public ISoundDevice { ... };`
  # Structs will follow the same naming convention as classes.
    * `struct SpuRegister { ... };`
  # Enumerations will begin with the word enum followed by a descriptive name with each word beginning with an uppercase letter.
    * `enum EnumSpuInterrupts`
  # Enumeration values will begin with the acronym of the enumeration name followed by an underscore and use the global variable naming convention.
    * `enum EnumSpuInterrupts { ESI_AUTO_DMA, ... };`
  # All macros will use the global variable naming convention.
    * `#define GET_REG(x) ...`
  # All macro code will be surrounded by `do { ... } while(0)` tags to avoid the various problems listed [http://kernelnewbies.org/FAQ/DoWhile0 here].
    * `#define GET_REG(x) do { ... } while(0)`

= Memory Allocation/Deallocation =

  # All memory allocation will be done with the new operator.
    * `SpuCore* spu_core0_ptr = new SpuCore;`
    * `SpuVoice* core0_voices_ptr = new SpuVoice[NUM_VOICES_PER_CORE];`
  # All memory deallocation will be done using the proper delete operator.
    * `delete spu_core0_ptr;`
    * `delete [] core0_voices_ptr;`

= Miscellaneous Styles =

  # In your editor avoid tabs, instead configure 1 tab = 4 spaces
  # Conditional and loop statements, no matter how short, will always contain brackets
    * Bad:
{{{
if(a == b)
    return true;
}}}
    * Good:
{{{
if(a == b)
{
    return true;
}
}}}
  # Avoid clumping long mathematical expressions, use good spacing
    * Bad: `((a+b)/d)`
    * Good: `((a + b) / d)`
  # Use cross-platform data types to ensure the right number of bits and save typing
    * Bad: `unsigned short reg_16;`
    * Good: `uint16 reg_16`
  # Use C++ style comments, never C style comments
    * Bad: `/* Do something */`
    * Good: `// Do something`
  # Use TODO comments to indicate tasks that are incomplete
    * Bad: `// Someone should check if the device is lost, it doesn't do it now`
    * Good: `// TODO: Check that the device has not been lost`
  # Put comments before the code they describe:
    * Bad:
{{{
interrupt &= ~INTERRUPT_BIT; // Clear the interrupt bit
}}}
    * Good:
{{{
// Clear the interrupt bit
interrupt &= ~INTERRUPT_BIT;
}}}
  # Initialize floating point values with a real number followed by a capital F
    * Bad: `float normal = 1;`
    * Good: `float normal = 1.0F`
  # When incrementing variables prefer post-increment to pre-increment, and when passing by value or const reference use + 1.
    * Bad: `++a;`
    * Good: `a++;`
    * Bad: `f( v.begin()++ );` or `f( ++v.begin() );`
    * Good: `f( v.begin() + 1 );`
  # Include guards will never coding any leading or following underscores, as per names with leading underscores being reserved in the C++ standard.
    * Bad: #ifndef __PS2SPU_MEMORY_HPP__
    * Good: #ifndef PS2SPU_MEMORY_HPP